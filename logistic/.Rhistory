## This is working! But it is a bit slow. We can speed it up by improving the heritability a bit and increasing the initial variation
bs <- ds <- 0.01
slope <- 0.1
traitcv <- 0.3
h2 <- 0.85
tmax <- 400
set.seed(123497)
seeds <- floor(runif(40,1,1e6))
library(parallel)
tmax <- 10
tmax <- 40
set.seed(123497)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=500,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out2)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(3,7))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "bmax", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
## This is working! But it is a bit slow. We can speed it up by improving the heritability a bit and increasing the initial variation
bs <- ds <- 0.01
slope <- 0.1
traitcv <- 0.3
h2 <- 0.85
tmax <- 100
set.seed(123497)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=500,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "bmax", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
## This is working! But it is a bit slow. We can speed it up by improving the heritability a bit and increasing the initial variation
bs <- ds <- 0.01
slope <- 0.1
traitcv <- 0.3
h2 <- 0.75
tmax <- 400
set.seed(123497)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=500,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "bmax", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
abline(h=2.43961, lty=2, col=2)
vtraj <- lapply(out3, function(o) lapply(o[[2]],var) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,0.3))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Var(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, vtraj[,i], col=gray(0.7))
lines(time.seq, apply(vtraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,1))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Var(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, vtraj[,i], col=gray(0.7))
lines(time.seq, apply(vtraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,3))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Var(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, vtraj[,i], col=gray(0.7))
lines(time.seq, apply(vtraj, 1, mean), lwd=2)
par(mfrow=c(3,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Mean(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
abline(h=2.43961, lty=2, col=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,3))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Var(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, vtraj[,i], col=gray(0.7))
l
lines(time.seq, apply(vtraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,5))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Var(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, vtraj[,i], col=gray(0.7))
lines(time.seq, apply(vtraj, 1, mean), lwd=2)
## This is working! But it is a bit slow. We can speed it up by improving the heritability a bit and increasing the initial variation
bs <- ds <- 0.01
slope <- 0.1
traitcv <- 0.3
h2 <- 0.85
tmax <- 40
set.seed(123497)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=500,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
apply(btraj, 1, mean)
apply(Ntraj, 1, mean)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=100,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
apply(btraj,1,mean)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=1000,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
apply(btraj, 1,mean)
## This is working! But it is a bit slow. We can speed it up by improving the heritability a bit and increasing the initial variation
bs <- ds <- 0.01
slope <- 0.1
traitcv <- 0.3
h2 <- 0.85
tmax <- 100
set.seed(123497)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=1000,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
vtraj <- lapply(out3, function(o) lapply(o[[2]],var) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(3,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(3,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
out3
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist)
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% lapply(., length)
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% lapply(., length) %>% unlist
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% length
length(out3)
40*1001
out3[[10]]
out3[[11]][[2]] %>% length
out3[[11]][[1]]
out3[[11]][[1]] %>% tail
out3[[11]][[1]] <- out3[[11]][[1]][1:1001]
out3[[11]][[2]] <- out3[[11]][[1]][1:1001]
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
vtraj <- lapply(out3, function(o) lapply(o[[2]],var) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(3,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Mean(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
btraj
btraj %>% tail
btraj[1001,]
set.seed(123123)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=1000,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
vtraj <- lapply(out3, function(o) lapply(o[[2]],var) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Mean(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
abline(h=2.43961, lty=2, col=2)
## This is working! But it is a bit slow. We can speed it up by improving the heritability a bit and increasing the initial variation
bs <- ds <- 0.01
slope <- 0.1
traitcv <- 0.3
h2 <- 0.75
tmax <- 100
set.seed(123123)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=2000,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
vtraj <- lapply(out3, function(o) lapply(o[[2]],var) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Mean(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
abline(h=2.43961, lty=2, col=2)
set.seed(12321)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=1000,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
vtraj <- lapply(out3, function(o) lapply(o[[2]],var) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Mean(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
abline(h=2.43961, lty=2, col=2)
set.seed(123210)
seeds <- floor(runif(40,1,1e6))
library(parallel)
mclapply(seeds,
function(s) logistic_GEM_cull(s, dt=0.1, tmax, N0, traitmean, traitcv, h2, bs, ds, slope,X=1000,Ncull=40),
mc.cores=8
) -> out3
Ntraj <- lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) lapply(o[[2]],mean) %>% unlist) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
lapply(o[[2]],length) %>% unlist)
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist)
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% lapply(., length)
lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% lapply(., length) %>% unlist
(lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% lapply(., length) %>% unlist)
which((lapply(out3, function(o) lapply(o[[2]],length) %>% unlist) %>% lapply(., length) %>% unlist)==1002)
o = out3[[25]]
o
lapply(o[[2]],length)
lapply(o[[2]],length) %>% unlist
(lapply(o[[2]],length) %>% unlist)
(lapply(o[[2]],length) %>% unlist)[1:1001]
Ntraj <- (lapply(out3, function(o) lapply(o[[2]],length) %>% unlist))[1:1001] %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
Ntraj <- lapply(out3, function(o) (lapply(o[[2]],length) %>% unlist)[1:1001]) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
Ntraj <- lapply(out3, function(o) (lapply(o[[2]],length) %>% unlist)[1:1001]) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
btraj <- lapply(out3, function(o) (lapply(o[[2]],mean) %>% unlist)[1:1001]) %>% unlist %>% matrix(., ncol=length(out3), byrow=F)
time.seq <- seq(0, tmax, 0.1)
## plot the mean trajectories across simulations:
par(mfrow=c(2,1), mar=c(4,4,0.5,0.5), oma=rep(0.5,4))
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(0,150))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Population size", line=2.5)
for (i in 1:length(out3)) lines(time.seq, Ntraj[,i], col=gray(0.7))
lines(time.seq, apply(Ntraj, 1, mean), lwd=2)
plot.new()
plot.window(xlim=c(0,tmax), ylim=c(1,6))
axis(1);axis(2);box('plot')
mtext(side=1, "Time", line=3)
mtext(side=2, "Mean(bmax)", line=2.5)
for (i in 1:length(out3)) lines(time.seq, btraj[,i], col=gray(0.7))
lines(time.seq, apply(btraj, 1, mean), lwd=2)
abline(h=2.43961, lty=2, col=2)
## Read in all of the data on Covid-19 at the state level
x <- read.csv(url("https://covidtracking.com/api/v1/states/daily.csv"))
## Read in the population sizes of every state to make appropriate per 100k calculations
y <- read.csv(url("https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/state/detail/SCPRC-EST2019-18+POP-RES.csv"))
## add abbreviations to census data
y$state <- c("USA","AL","AK","AZ","AR","CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ",'NM','NY','NC','ND','OH','OK','OR','PA','RI','SC','SD','TN','TX','UT','VT','VA','WA','WV','WI','WY','PR')
## merge the two datasets into a single dataset
merge(x,y,by='state') -> z
head(z)
mutate(z,
date=date %>% as.character %>% as.Date(., format="%Y%m%d"),
totTests=positive+negative,
infectedCurrently=ifelse(!is.na(recovered),positive-recovered,positive),
fracHospitalized=hospitalizedCurrently/infectedCurrently,
totCaseFatality=death/positive*100,
hospCaseFatality=death/hospitalized*100,
casesPer100k=positive/POPESTIMATE2019*100000,
testsPer100k=totTests/POPESTIMATE2019*100000,
deathsPer100k=death/POPESTIMATE2019*100000,
newCasesPer100k=positiveIncrease/POPESTIMATE2019*100000,
testPosRate=positive/totTests) -> z
## Drop some territories where I don't have population data
z[!(z$state %in% (sapply(levels(z$state), function(s) with(subset(z, state==s),all(is.na(casesPer100k)))) %>% which %>% names)),] -> z
z$state <- factor(z$state)
levels(z$state)
specifyState <- c("NE")
stateColors <- data.frame(state=levels(z$state),
stateColor=1)
stateColors$stateColor[stateColors$state%in%specifyState] <- 2.5
## these two lines make the chosen states the last to be plotted
for (i in specifyState) z$state <- relevel(z$state, i)
z$state <- factor(z$state, levels=rev(levels(z$state)))
par(mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(18325, max(z$date,na.rm=T)+0.5), ylim=range(z$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(18325,18388,by=7), labels=c("03/04/20","03/11/20","03/18/20","03/25/20","04/01/20","04/08/20","04/15/20","04/22/20","04/29/20","05/06/20")); box('plot')
mtext(side=2, line=3, "Cases per 100k population")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(date[order(date)], casesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(date)+0.5, max(casesPer100k,na.rm=T), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
dev.off()
par(mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(18325, max(z$date,na.rm=T)+0.5), ylim=range(z$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(18325,18388,by=7), labels=c("03/04/20","03/11/20","03/18/20","03/25/20","04/01/20","04/08/20","04/15/20","04/22/20","04/29/20","05/06/20")); box('plot')
mtext(side=2, line=3, "Cases per 100k population")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(date[order(date)], casesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(date)+0.5, max(casesPer100k,na.rm=T), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
par(mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(18325, max(z$date,na.rm=T)+0.5), ylim=range(z$testsPer100k, na.rm=T))
axis(2); axis(1, at=seq(18325,18388,by=7), labels=c("03/04/20","03/11/20","03/18/20","03/25/20","04/01/20","04/08/20","04/15/20","04/22/20","04/29/20","05/06/20")); box('plot')
mtext(side=2, line=3, "Tests per 100k population")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(date[order(date)], testsPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(date)+0.5, max(testsPer100k,na.rm=T), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
par(mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(18325, max(z$date,na.rm=T)+0.5), ylim=range(z$casesPer100k, na.rm=T))
axis(2); axis(1, at=seq(18325,18388,by=7), labels=c("03/04/20","03/11/20","03/18/20","03/25/20","04/01/20","04/08/20","04/15/20","04/22/20","04/29/20","05/06/20")); box('plot')
mtext(side=2, line=3, "Cases per 100k population")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(date[order(date)], casesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(date)+0.5, max(casesPer100k,na.rm=T), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
par(mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(18325, max(z$date,na.rm=T)+0.5), ylim=c(0,0.45))
axis(2); axis(1, at=seq(18325,18388,by=7), labels=c("03/04/20","03/11/20","03/18/20","03/25/20","04/01/20","04/08/20","04/15/20","04/22/20","04/29/20","05/06/20")); box('plot')
mtext(side=2, line=3, "Case positivity rate")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(date[order(date)], testPosRate[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(date)+0.5, tail(testPosRate[order(date)],1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
par(mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(18325, max(z$date,na.rm=T)+0.5), ylim=range(z$deathsPer100k,na.rm=T))
axis(2); axis(1, at=seq(18325,18388,by=7), labels=c("03/04/20","03/11/20","03/18/20","03/25/20","04/01/20","04/08/20","04/15/20","04/22/20","04/29/20","05/06/20")); box('plot')
mtext(side=2, line=3, "Deaths per 100k population")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(date[order(date)], deathsPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(date)+0.5, tail(deathsPer100k[order(date)],1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
par(mar=c(3,5,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=c(18325, max(z$date,na.rm=T)+0.5), ylim=range(z$newCasesPer100k,na.rm=T))
axis(2); axis(1, at=seq(18325,18388,by=7), labels=c("03/04/20","03/11/20","03/18/20","03/25/20","04/01/20","04/08/20","04/15/20","04/22/20","04/29/20","05/06/20")); box('plot')
mtext(side=2, line=3, "Daily new cases per 100k population")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(date[order(date)], newCasesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(date)+0.5, tail(newCasesPer100k[order(date)],1), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
par(mar=c(4,4,0.5,0.5), oma=rep(0,4))
plot.new()
plot.window(xlim=range(z$testsPer100k,na.rm=T), ylim=range(z$casesPer100k))
axis(1); axis(2); box('plot')
mtext(side=1, line=3, "Tests per 100k population")
mtext(side=2, line=3, "Cases per 100k population")
sapply(levels(z$state), function(s) with(subset(z, state==s), lines(testsPer100k[order(date)], casesPer100k[order(date)], col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2), lwd=stateColors$stateColor[which(stateColors$state==s)])))
sapply(levels(z$state), function(s) with(subset(z, state==s), text(max(testsPer100k,na.rm=T), max(casesPer100k,na.rm=T), s, col=gray((2.5-stateColors$stateColor[which(stateColors$state==s)])/2))))
library(patchwork)
z %>% group_by(date) %>% summarise(totCases=sum(positive,na.rm=T), totNewCases=sum(positiveIncrease,na.rm=T), totTests=sum(totalTestResults,na.rm=T), totNewTests=sum(totalTestResultsIncrease,na.rm=T), totDeaths=sum(death,na.rm=T), totNewDeaths=sum(deathIncrease,na.rm=T), casePosRate=sum(positive,na.rm=T)/sum(totalTestResults,na.rm=T)) %>% subset(., date > "2020-03-01")-> nationalSummary
p1 <- ggplot(nationalSummary, aes(x=date, y=totCases)) + geom_line() + theme_bw()
p2 <- ggplot(nationalSummary, aes(x=date, y=totTests)) + geom_line() + theme_bw()
p3 <- ggplot(nationalSummary, aes(x=date, y=totDeaths)) + geom_line() + theme_bw()
p4 <- ggplot(nationalSummary, aes(x=date, y=totNewCases)) + geom_line() + theme_bw()
p5 <- ggplot(nationalSummary, aes(x=date, y=totNewTests)) + geom_line() + theme_bw()
p6 <- ggplot(nationalSummary, aes(x=date, y=totNewDeaths)) + geom_line() + theme_bw()
p7 <- ggplot(nationalSummary, aes(x=date, y=casePosRate)) + geom_line() + coord_cartesian(ylim=c(0.1,0.25)) + theme_bw()
(p4+p6)/(p5+p7)
