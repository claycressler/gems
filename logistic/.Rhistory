mutate(event_probs2, fitness=pbirth-pdeath) -> event_probs2
## observed "fitness"
plot(sort(b), event_probs[order(b),"fitness"], ylim=c(-0.001,0.0015), xlab="Birth rate", ylab="P(birth)-P(death)")
## expected fitness
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/((sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))*length(b)), lwd=2, lty=2)
points(sort(b), event_probs2[order(b),"fitness"], col=2)
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/(sum(sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))), lwd=2, lty=2, col=2)
plot(sort(b), event_probs[order(b),"fitness"], ylim=c(-0.001,0.0015), xlab="Birth rate", ylab="P(birth)-P(death)", ylim=range(event_probs2[,"fitness"]))
## expected fitness
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/((sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))*length(b)), lwd=2, lty=2)
points(sort(b), event_probs2[order(b),"fitness"], col=2)
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/(sum(sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))), lwd=2, lty=2, col=2)
plot(sort(b), event_probs[order(b),"fitness"], xlab="Birth rate", ylab="P(birth)-P(death)", ylim=range(event_probs2[,"fitness"]))
## expected fitness
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/((sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))*length(b)), lwd=2, lty=2)
points(sort(b), event_probs2[order(b),"fitness"], col=2)
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/(sum(sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))), lwd=2, lty=2, col=2)
plot(sort(b), event_probs[order(b),"fitness"], xlab="Birth rate", ylab="P(birth)-P(death)", ylim=range(c(events_probs[,"fitness"],event_probs2[,"fitness"])))
## expected fitness
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/((sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))*length(b)), lwd=2, lty=2)
points(sort(b), event_probs2[order(b),"fitness"], col=2)
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/(sum(sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))), lwd=2, lty=2, col=2)
plot(sort(b), event_probs[order(b),"fitness"], xlab="Birth rate", ylab="P(birth)-P(death)", ylim=range(c(event_probs[,"fitness"],event_probs2[,"fitness"])))
## expected fitness
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/((sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))*length(b)), lwd=2, lty=2)
points(sort(b), event_probs2[order(b),"fitness"], col=2)
lines(sort(b), (sort(b)-bs*length(b)-(s*sort(b)^2+ds*length(b)))/(sum(sort(b)-bs*length(b)+(s*sort(b)^2+ds*length(b)))), lwd=2, lty=2, col=2)
## Discrete time exponential
## n(t+1) = n(t) + b*n(t) - m*n(t) = n(t) + (b-m)*n(t) = n(t) + r*n(t)
t0 <- 0 ## initial time
tmax <- 100 ## final time
n0 <- 1 ## initial population size
r <- 0.1 ## per-capita growth rate
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]
}
plot(x=t0:tmax, y=n, type='l')
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 1
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 1.5
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
tmax <- 1000 ## final time
n0 <- 1 ## initial population size
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
r<- 2
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
tmax <- 200 ## final time
n0 <- 1 ## initial population size
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
r<- 2
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.1
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
tmax <- 100 ## final time
n0 <- 1 ## initial population size
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
r<- 2.1
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.2
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.3
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.4
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.5
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.56
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.57
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2.6
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 3
K <- 100
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
K <- 10
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r<- 2
K <- 10
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
tmax <- 500
n0 <- 1 ## initial population size
## set up storage
store <- array(NA, dim=c(50,length(seq(1,3,0.01))))
for (j in 1:length(seq(1,3,0.01))) {
r <- seq(1,3,0.01)[j]
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
## store the final 50 timepoints in column j
store[,j] <- tail(n,50)
}
plot(x=t0:tmax, y=n, type='l')
head(store)
plot.new()
plot.window(xlim=c(1,3), ylim=range(store))
axis(1); axis(2); box('plot')
for (j in 1:ncol(store)) {
points(rep(seq(1,3,0.01)[j],50), store[,j], pch=0.1)
}
plot.new()
plot.window(xlim=c(1,3), ylim=range(store))
axis(1); axis(2); box('plot')
for (j in 1:ncol(store)) {
points(rep(seq(1,3,0.01)[j],50), store[,j], pch=21, bg=1, cex=0.1)
}
## specify initial variable conditions
y <- c(n=1)
## specify the parameters
pars <- c(r=0.1, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contExp, parms=pars, method="lsoda")
library(deSolve)
out <- ode(y=y, times=times, func=contExp, parms=pars, method="lsoda")
contLog <- function(t, y, pars) {
## pull out meaningful variable names
n <- y["n"]
## pull out meaningful parameter names
r <- pars["r"] ##
K <- pars["K"] ##
## differential equations
dndt <- r*n*(1-n/K)
return(list(c(dndt)))
}
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
conditions
plot(x=out[,"time"], y=out[,"n"], type='l')
## specify the parameters
pars <- c(r=0.01, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
plot(x=out[,"time"], y=out[,"n"], type='l')
## specify the parameters
pars <- c(r=1, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
plot(x=out[,"time"], y=out[,"n"], type='l')
## Discrete time logistic model
## n(t+1) = n(t) + b*n(t)*(1-n(t)/K)
t0 <- 0 ## initial time
tmax <- 100 ## final time
n0 <- 1 ## initial population size
r <- 0.1 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 0.01 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 1 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 1.5 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 1.7 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2 ## per-capita growth rate
K <- 50
n0 <- 1 ## initial population size
r <- 2 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.2 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.49 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.5 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.56 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.565 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 2.7 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
r <- 3 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
n0 <- 1.001 ## initial population size
r <- 3 ## per-capita growth rate
K <- 50
## initialize storage for population sizes
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
plot(x=t0:tmax, y=n, type='l')
## specify the parameters
pars <- c(r=3, K=50)
## times to record
times <- seq(t0,tmax,1)
out <- ode(y=y, times=times, func=contLog, parms=pars, method="lsoda")
plot(x=out[,"time"], y=out[,"n"], type='l')
## Bifurcation diagram- how do dynamics change as you change a single parameter
tmax <- 500
n0 <- 1 ## initial population size
## set up storage
store <- array(NA, dim=c(50,length(seq(1,3,0.01))))
for (j in 1:length(seq(1,3,0.01))) {
r <- seq(1,3,0.01)[j]
n <- vector(mode='numeric', length=length(0:tmax))
n[1] <- n0 ## store the initial population size
for (t in (t0+1):tmax) {
n[t+1] <- n[t] + r*n[t]*(1-n[t]/K)
}
## store the final 50 timepoints in column j
store[,j] <- tail(n,50)
}
plot.new()
plot.window(xlim=c(1,3), ylim=range(store))
axis(1); axis(2); box('plot')
for (j in 1:ncol(store)) {
points(rep(seq(1,3,0.01)[j],50), store[,j], pch=21, bg=1, cex=0.1)
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
pick_individuals <- function(N0, traitmean, traitsd) {
mu <- log(traitmean^2 / sqrt(traitsd^2+traitmean^2))
sigma <- sqrt(log(traitsd^2/traitmean^2 + 1))
## record this initial distribution in the output
return(rlnorm(N0, meanlog=mu, sdlog=sigma))
}
## generate many different individuals
set.seed(10010)
b <- pick_individuals(100, 0.25, 0.05)
## simulate the choosing of individuals and events under both GEM formulations many, many times and confirm that the probabilities of any individual being chosen match the expectation derived above
s <- 2
bs <- ds <- 5e-4
## generate many different individuals
set.seed(10010)
## generate many different individuals
set.seed(10010)
## generate many different individuals
set.seed(10010)
b <- pick_individuals(100, 0.25, 0.05)
## simulate the choosing of individuals and events under both GEM formulations many, many times and confirm that the probabilities of any individual being chosen match the expectation derived above
s <- 2
bs <- ds <- 5e-4
data.frame(ind=sample(1:length(b), 1e5, replace=TRUE), ## pick individuals at random
rand=runif(1e5), ## draw a random number
birth=rep(0,1e5),
death=rep(0,1e5)) %>%
mutate(birth=ifelse(rand > (b[ind]-bs*length(b))/(b[ind]-bs*length(b)+s*b[ind]^2+ds*length(b)), 0, 1), ## compare the random number to the relative rate of birth
death=ifelse(birth==0,1,0)) -> events
## Alternative GEM
events2 <- array(NA, dim=c(1e5,3))
## create the "wheel" of fortune cumsum'ing all of the individual per-capita rates
brates <- b-bs*length(b)
drates <- s*b^2+ds*length(b)
rates <- c(brates, drates)
wheel <- cumsum(rates)/sum(rates)
for (i in 1:1e5) {
## choose an individual and event at random
rand <- runif(1)
## who does the event happen to?
ind <- ifelse(min(which(rand < wheel)) <= length(b),
min(which(rand < wheel)),
min(which(rand < wheel))-length(b))
## which event happens?
birth <- death <- 0
if (rand <= sum(brates)/sum(rates))
birth <- 1
else death <- 1
events2[i,] <- c(ind,birth,death)
}
events2 <- as.data.frame(events2)
colnames(events2) <- c("ind","birth","death")
head(events)
## what is the average birth rate under the two simulations?
nbirths_orig <- sum(events$birth)
nbirths_orig
sum(events$birth)
sum(events2$birth)
setwd("~/gems/logistic")
knitr::opts_chunk$set(echo = TRUE)
out1 <- readRDS("Logistic_GEM_bs=ds=025_varying_b0_and_N0.RDS")
out2 <- readRDS("Logistic_GEM_bs=ds=025_varying_b0_N0=10.RDS")
out3 <- readRDS("Logistic_GEM_bs=ds=025_varying_b0_N0=50.RDS")
mean_Val <- o1 %>% group_by(init, Var) %>% summarize(meanVal=mean(tail(Val,100)))
library(tidyverse)
mean_Val <- o1 %>% group_by(init, Var) %>% summarize(meanVal=mean(tail(Val,100)))
out1 %>% pivot_longer(c(N,b), names_to="Var", values_to="Val") -> o1
mean_Val <- o1 %>% group_by(init, Var) %>% summarize(meanVal=mean(tail(Val,100)))
ggplot(o1, aes(x=time, y=Val)) +
facet_grid(Var~init,scales="free_y") + geom_line() +
geom_hline(aes(yintercept=meanVal, col="red"), mean_Val) +
geom_hline()
ggplot(o1, aes(x=time, y=Val)) +
facet_grid(Var~init,scales="free_y") + geom_line() +
geom_hline(aes(yintercept=meanVal, col="red"), mean_Val) +
theme_bw()
## Start simulations with a range of initial population sizes and trait values
## ESS is bmax* = 1/(2*slope) = 3
## Ecological equilibrium N* = (bmax-s*bmax^2)/(bs+ds)
setwd("~/gems/logistic")
source("logistic_GEM.R")
library(tidyverse)
library(parallel)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/gems/logistic")
source("logistic_GEM.R")
library(tidyverse)
library(parallel)
out1 <- readRDS("Logistic_GEM_bs=ds=025_varying_b0_and_N0.RDS")
out2 <- readRDS("Logistic_GEM_bs=ds=025_varying_b0_N0=10.RDS")
out3 <- readRDS("Logistic_GEM_bs=ds=025_varying_b0_N0=50.RDS")
out1 %>% pivot_longer(c(N,b), names_to="Var", values_to="Val") -> o1
mean_Val <- o1 %>% group_by(init, Var) %>% summarize(meanVal=mean(tail(Val,100)))
ggplot(o1, aes(x=time, y=Val)) +
facet_grid(Var~init,scales="free_y") + geom_line() +
geom_hline(aes(yintercept=meanVal, col="red"), mean_Val) +
theme_bw()
meanVal
mean_Val
mean_Val <- o1 %>% group_by(init, Var) %>% summarize(meanVal=mean(tail(Val,100))) %>%
mutate(expVal=rep(c(3,30),nrow(mean_Val)/2))
mean_Val <- o1 %>% group_by(init, Var) %>% summarize(meanVal=mean(tail(Val,100))) %>%
mutate(expVal=rep(c(3,30)))
mean_Val
head(out1)
out1 %>% pivot_longer(c(b,QGselGrad,LRSselGrad), names_to="Var", values+"Val") -> o11
out1 %>% pivot_longer(c(b,QGselGrad,LRSselGrad), names_to="Var", values="Val") -> o11
out1 %>% pivot_longer(c(b,QGselGrad,LRSselGrad), names_to="Var", values_to="Val") -> o11
1.5/0.075
1.5/0.05
1.5/0.025
ggplot(o11, aes(x=time, y=Val)) +
facet_grid(Var~init,scales="free_y") +
geom_line() +
geom_hline(aes(yintercept=meanVal, col="red"), mean_Val) +
geom_hline(aes(yintercept=0, col="blue"), linetype='dashed')
install.packages("bookdown")
(0.5-0.025*10)/(0.5-0.025*10+1/6*0.5^2+0.025*10)
(5.5-0.025*10)/(5.5-0.025*10+1/6*5.5^2+0.025*10)
ds = bs = 0.025
s = 1/6
b = seq(0.5,5.5,0.1)
plot(b, 1-2*s*b, type='l')
n = 10
plot(b, (ds*n - b*(b - 2*bs*n)*s)/(ds*n + b^2*s)^2, type='l', lwd=2, col=2)
