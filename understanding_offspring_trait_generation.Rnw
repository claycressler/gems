\documentclass[12pt,reqno,final,pdftex]{amsart}
%% DO NOT DELETE OR CHANGE THE FOLLOWING TWO LINES!
%% $Revision$
%% $Date$
\usepackage[round,sort,elide]{natbib}
\usepackage{graphicx}
\usepackage{times}
\usepackage{rotating}
\usepackage{subfig}
\usepackage{color}
\newcommand{\aak}[1]{\textcolor{cyan}{#1}}
\newcommand{\mab}[1]{\textcolor{red}{#1}}
\newcommand{\cec}[1]{\textcolor{blue}{#1}}

\setlength{\textwidth}{6.25in}
\setlength{\textheight}{8.75in}
\setlength{\evensidemargin}{0in}
\setlength{\oddsidemargin}{0in}
\setlength{\topmargin}{-.35in}
\setlength{\parskip}{.1in}
\setlength{\parindent}{0.3in}

%% cleveref must be last loaded package
\usepackage[sort&compress]{cleveref}
\newcommand{\crefrangeconjunction}{--}
\crefname{figure}{Fig.}{Figs.}
\Crefname{figure}{Fig.}{Figs.}
\crefname{table}{Table}{Tables}
\Crefname{table}{Tab.}{Tables}
\crefname{equation}{Eq.}{Eqs.}
\Crefname{equation}{Eq.}{Eqs.}
\crefname{appendix}{Appendix}{Appendices}
\Crefname{appendix}{Appendix}{Appendices}
\creflabelformat{equation}{#2#1#3}

\theoremstyle{plain}
\newtheorem{thm}{Theorem}
\newtheorem{corol}[thm]{Corollary}
\newtheorem{prop}[thm]{Proposition}
\newtheorem{lemma}[thm]{Lemma}
\newtheorem{defn}[thm]{Definition}
\newtheorem{hyp}[thm]{Hypothesis}
\newtheorem{example}[thm]{Example}
\newtheorem{conj}[thm]{Conjecture}
\newtheorem{algorithm}[thm]{Algorithm}
\newtheorem{remark}{Remark}
\renewcommand\thethm{\arabic{thm}}
\renewcommand{\theremark}{}

\numberwithin{equation}{part}
\renewcommand\theequation{\arabic{equation}}
\renewcommand\thesection{\arabic{section}}
\renewcommand\thesubsection{\thesection.\arabic{subsection}}
\renewcommand\thefigure{\arabic{figure}}
\renewcommand\thetable{\arabic{table}}
\renewcommand\thefootnote{\arabic{footnote}}

\newcommand\scinot[2]{$#1 \times 10^{#2}$}
\newcommand{\code}[1]{\texttt{#1}}
\newcommand{\pkg}[1]{\textsf{#1}}
\newcommand{\dlta}[1]{{\Delta}{#1}}
\newcommand{\Prob}[1]{\mathbb{P}\left[#1\right]}
\newcommand{\Expect}[1]{\mathbb{E}\left[#1\right]}
\newcommand{\Var}[1]{\mathrm{Var}\left[#1\right]}
\newcommand{\dd}[1]{\mathrm{d}{#1}}
\newcommand{\citetpos}[1]{\citeauthor{#1}'s \citeyearpar{#1}}

\begin{document}

<<setup,include=FALSE,cache=F>>=
require(knitr)
opts_chunk$set(
               progress=T,prompt=F,tidy=F,highlight=T,
               warning=F,message=F,error=F,
               results='hide',echo=F,cache=T,
               size='scriptsize',
               fig.path='figure/',fig.lp="fig:",
               fig.align='left',
               fig.show='asis',
               fig.height=4,fig.width=6.83,
               out.width="\\linewidth",
               dpi=150,
               dev=c('png','tiff'),
               dev.args=list(
                 png=list(bg='transparent'),
                 tiff=list(compression='lzw')
                 )
               )

aqscinot <- function (x, digits = 2, type = c("expression","latex")) {
  type <- match.arg(type)
  x <- signif(x,digits=digits)
  ch <- floor(log10(abs(x)))
  mn <- x/10^ch
  switch(type,
         expression={
           bquote(.(mn)%*%10^.(ch))
         },
         latex={
           paste0("\\scinot{",mn,"}{",ch,"}")
         }
         )
}

require(xtable)

options(scipen=-1)

options(
        xtable.caption.placement="top",
        xtable.include.rownames=FALSE
        )

@

In this document, I explore the methods used by GEMs for generating offspring.

Here is the code for generating new individuals.
<<echo=TRUE>>=
## Code for generating new individuals
pick_individuals <- function(N0, traitmean, traitsd) {
    mu <- log(traitmean^2 / sqrt((traitsd)^2+traitmean^2))
    sigma <- sqrt(log(traitsd^2/traitmean^2 + 1))
    ## record this initial distribution in the output
    return(rlnorm(N0, meanlog=mu, sdlog=sigma))
}
@ 

I am going to generate an initial population of ``parents'' with identical traits. 
To do this, I am using the pick\_individuals function with N0=1000, traitmean=1, and traitsd=0.3.
Each of these parents will give birth to a single offspring.
Offspring generation in GEMs is a bit complex. 
In particular, given a parent with trait $p$ and a population of parents with mean trait $\bar{p}$, and a heritability of $h^2$, the value of traitmean that will be plugged into pick\_individuals is $(1-h^2)\bar{p} + h^2p$.
At the extremes, if $h^2=1$ then the mean trait in the offspring generation function is identical to their parent trait; if $h^2=0$, then the mean trait in the offspring generation function is equal to the population-level mean.
The value of traitsd is calculated using $\sqrt{1-(h^2)^2}\left((1-h^2)*\sigma_0 + h^2\sigma_p\right)$, where $\sigma_0$ was the initial amount of trait variation and $\sigma_p$ is the trait variation in the current population.
Starting out, then, $\sigma_0 = \sigma_p$. 

What I am going to do is generating one offspring per parent for 10 different levels of heritability ranging from 0.1 to 1.0. 
That gives me data upon which I calculate a parent-offspring regression, which is a standard way of estimating heritability in real data: heritability is the slope of the parent-offspring regression.
I repeat this process, using the offspring from the first generation as parents for a second generation, and then again performing a parent-offspring regression.
Finally, just for completeness, I do this for a third generation, using the offspring of the second generation as parents.
The three figures show the estimates of heritability across the generations.


<<echo=FALSE, dev='pdf', fig.keep='high', fig.width=4.5, fig.height=5.5, fig.cap="Parent-offspring regressions for the first generation.">>=
## Generate an initial population of "parents" with identical means
cv <- 0.3
traitmean <- 1
parents0 <- pick_individuals(1000, traitmean=traitmean, traitsd=cv*traitmean)

## Now, for each parent, generate one offspring assuming different values of h2
h2.seq <- seq(0.1,1,0.1)
lapply(h2.seq,
       function(h2)
           sapply(parents0,
                  function(p)
                      pick_individuals(1,
                                       traitmean=(1-h2)*mean(parents0) + h2*p,
                                       traitsd=sqrt(1-h2^2)*((1-h2)*sd(parents0)+h2*sd(parents0))
                                       )
                  )
       ) -> offspring1

## Now use parent-offspring regression to estimate heritability for each actual heritability value
par(mfrow=c(5,2), mar=c(2,2,0.5,0.5), oma=c(0,0,0,0), family='HersheySans')
for (i in 1:length(h2.seq)) {
    plot(parents0, offspring1[[i]], ylab="", xlab="")
    abline(lm(offspring1[[i]]~parents0))
    legend(x='bottomright',
           c(paste("h^2 =", h2.seq[i]),
             paste('est h^2 =', unname(signif(coef(lm(offspring1[[i]]~parents0))[2],3)))),
           bty='n', text.col=2, cex=0.75)
}
@ 

<<echo=FALSE, dev='pdf', fig.keep='high', fig.width=4.5, fig.height=5.5, fig.cap="Parent-offspring regressions for the second generation.">>=
## Now simulate a second generation, using the offspring above as the parents
parents1 <- offspring1
lapply(1:length(h2.seq),
       function(i) {
           h2 <- h2.seq[i]
           sapply(parents1[[i]],
                  function(p)
                      pick_individuals(1,
                                       traitmean=(1-h2)*mean(parents0) + h2*p,
                                       traitsd=sqrt(1-h2^2)*((1-h2)*sd(parents0)+h2*sd(parents1[[i]]))
                                       )
                  )
       }
       ) -> offspring2

par(mfrow=c(5,2), mar=c(2,2,0.5,0.5), oma=c(0,0,0,0), family='HersheySans')
for (i in 1:length(h2.seq)) {
    plot(parents1[[i]], offspring2[[i]], ylab="", xlab="")
    abline(lm(offspring2[[i]]~parents1[[i]]))
    legend(x='bottomright',
           c(paste("h^2 =", h2.seq[i]),
             paste('est h^2 =', unname(signif(coef(lm(offspring1[[i]]~parents0))[2],3)))),
           bty='n', text.col=2, cex=0.75)
}
@

<<echo=FALSE, dev='pdf', fig.keep='high', fig.width=4.5, fig.height=5.5, fig.cap="Parent-offspring regressions for the third generation.">>=
## Now simulate a third generation, using the offspring above as the parents
parents2 <- offspring2
lapply(1:length(h2.seq),
       function(i) {
           h2 <- h2.seq[i]
           sapply(parents2[[i]],
                  function(p)
                      pick_individuals(1,
                                       traitmean=(1-h2)*mean(parents0) + h2*p,
                                       traitsd=sqrt(1-h2^2)*((1-h2)*sd(parents0)+h2*sd(parents2[[i]]))
                                       )
                  )
       }
       ) -> offspring3

par(mfrow=c(5,2), mar=c(2,2,0.5,0.5), oma=c(0,0,0,0), family='HersheySans')
for (i in 1:length(h2.seq)) {
    plot(parents2[[i]], offspring3[[i]], ylab="", xlab="")
    abline(lm(offspring3[[i]]~parents2[[i]]))
    legend(x='bottomright',
           c(paste("h^2 =", h2.seq[i]),
             paste('est h^2 =', unname(signif(coef(lm(offspring1[[i]]~parents0))[2],3)))),
           bty='n', text.col=2, cex=0.75)
}
@ 

\newpage

Let's compare that to the case where I'm actually running a GEM to see what happens.
In particular, I want to study how the parent-offspring regression changes at different timepoints.
You can see that, if you examine the regression over the entire simulation run, the heritability appears to be very high, examined over any smaller interval, it is exactly where you expect it to be!

<<echo=FALSE, dev='pdf', fig.keep='high', fig.width=4.5, fig.height=5.5, fig.cap="Parent-offspring regressions from a GEM simulation.">>=
source("logistic_GEM_with_storage.R")
traitmean <- 1.8
traitcv <- 0.3
h2 <- 0.75
slope <- 0.3/1.8^2 ## from dmin = slope*bmax^2 => 0.3 = slope*1.8^2
tmax <- 100
N0 <- 10
bs <- ds <- 0.025

out <- logistic_GEM_storage(seed=123432, tmax, N0, traitmean, traitcv, h2, bs, ds, slope)

par(mfrow=c(5,2), mar=c(2.5,2.5,0,0), oma=rep(0,4), family='HersheySans')
with(subset(out, tBirth > 0), plot(ancTrait, trait))
legend(x='topleft', c('Overall', paste0("est h2 = ", signif(with(subset(out, tBirth > 0), coef(lm(trait~ancTrait))[2]),2))), bty='n', text.col=2, cex=0.75)

for (i in seq(0,80,10)) {
    with(subset(out, tBirth > i & tBirth < i+5), plot(ancTrait, trait))
    legend(x='topleft', c(paste(i,'< tBirth <',i+5), paste0("est h2 = ", signif(with(subset(out, tBirth > i & tBirth < i+5), coef(lm(trait~ancTrait))[2]),2))), bty='n', text.col=2, cex=0.75)
}

@ 


\end{document}


