library(magrittr)
library(parallel)

pick_individuals <- function(N0, traitmean, traitsd) {
    mu <- log(traitmean^2 / sqrt((traitsd)^2+traitmean^2))
    sigma <- sqrt(log(traitsd^2/traitmean^2 + 1))
    ## record this initial distribution in the output
    return(rlnorm(N0, meanlog=mu, sdlog=sigma))
}


## need to specify the initial system state (initialstate), the initial trait mean and CV, the "heritability", and a vector of parameter values
predprey_GEM <- function(seed, tmax, dt, initialstate, traitmean, traitcv, h2, params, report=FALSE) {
    ## Extract the parameters
    K <- unname(params["K"]) ## prey carrying capacity
    d <- unname(params["d"]) ## prey minimum death rate
    a0 <- unname(params["a0"]) ## predator attack rate parameter
    e <- unname(params["e"]) ## predator conversion efficiency
    m <- unname(params["m"]) ## predator natural death rate

    ## set RNG seed
    set.seed(seed)
    ## initialize
    times <- seq(0,tmax,by=dt)
    t <- 0 ## current time
    ## storage for time series; at each timestep, record the system state and the traits of every individual in the population
    stateoutput <- vector("list", length(times))
    traitoutput <- vector("list", length(times))

    ## initial system and trait state
    currentstate <- initialstate
    ## draw initial trait distribution from lognormal with meanlog and sdlog given by traitmean and traitcv
    currenttrait <- pick_individuals(initialstate["C"], traitmean, traitsd=traitmean*traitcv)

    ## record the initial system and trait states
    stateoutput[[1]] <- currentstate
    traitoutput[[1]] <- currenttrait

    i <- 1 ## how many things in the output file?
    while (t < tmax) {
        if (report) {
            print(t)
            print(length(currenttrait))
        }
        if (length(currenttrait) > 0) { ## as long as the evolving population size is > 0, pick an individual
            ind <- sample(1:length(currenttrait),1)
            trait <- currenttrait[ind] ## the trait is the prey birth rate
            C <- currentstate["C"]
            P <- currentstate["P"]
            ## set up rates for each possible event
            Cbirth <- trait*C ## prey birth
            Cdeath <- d*C + (trait-d)/K*C*C + (a0*trait^2)*C*P ## prey death
            Pbirth <- e*(a0*trait^2)*C*P ## predator birth
            Pdeath <- m*P ## preator death

            ## wheel of fortune
            events <- c(Cbirth,Cdeath,Pbirth,Pdeath)
            wheel <- cumsum(events)/sum(events)
            ## which event happens?
            event <- min(which(runif(1) < wheel))
            if (report) {
                print(wheel)
                print(paste("event is", event))
            }

            if (event==1) { ## prey birth
                currentstate["C"] <- currentstate["C"]+1
                ## give this new individual a trait
                trait_parent <- (1-h2)*mean(currenttrait) + h2*trait
                if (length(currenttrait) > 1) ## if there is more than one individual in the current population, you can compute the standard deviation of the current trait distribution
                    off_std <- sqrt(1-h2^2)*((1-h2)*sd(traitoutput[[1]])+h2*sd(currenttrait))
                ## otherwise, just set this sd=0
                else off_std <- sqrt(1-h2^2)*((1-h2)*sd(traitoutput[[1]]))
                newtrait <- pick_individuals(1, trait_parent, off_std)
                if (newtrait > 10) {
                    print(paste("new trait is", newtrait))
                    print(paste("parent trait is", trait_parent))
                    print(paste("currenttrait sd is", sd(currenttrait)))
                    print(paste("offpsring std is", off_std))
                }
                currenttrait <- c(currenttrait, newtrait)
            }
            else if (event==2) { ## prey death
                currentstate["C"] <- currentstate["C"]-1
                currenttrait <- currenttrait[-ind]
            }
            else if (event==3) ## predator birth
                currentstate["P"] <- currentstate["P"] + 1

            else ## predator death
                currentstate["P"] <- currentstate["P"] - 1

            ## advance time
            t <- t + exp(-1/sum(events))/sum(events)

            ## record in the output if necessary
            if (t > times[i+1]) {## if time has passed the next recording time
                stateoutput[[i+1]] <- currentstate ## record the system state
                traitoutput[[i+1]] <- currenttrait
                i <- i + 1 ## advance to the next timestep
            }
        }
        else {
            if (report) print("Evolving population is extinct")
            break
        }
    }
    return(list(states=stateoutput, traits=traitoutput))
}


## All of the following parameter sets lead to 2000 predators+prey at equilibrium, but they vary in how many there are
## at m = 4.9, C=1960 and P=40
## at m = 2, C=1000 and P=1000
## at m = 0.1, C=40 and P=1960
## The evolutionary equilibrium for the consumer birth rate is b = 2
## It's unclear whether the initial conditions should be above or below b=2: I'm assuming above, so I will initialize at b=4.
seeds <- runif(40, 1, 1e6) %>% floor
params <- c(K= 2000, a0=0.000125, e=5, m=4.9, d=1)

sirout <- sir_GEM(seed=seeds[1], tmax=200, dt=0.1, initialstate=c(S=1980,I=20), traitmean=4, traitcv=0.5, h2=0.85, params=params, report=TRUE)




